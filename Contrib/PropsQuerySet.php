<?php
/**
 *
 *
 * All rights reserved.
 *
 * @author Okulov Anton
 * @email qantus@mail.ru
 * @version 1.0
 * @company HashStudio
 * @site http://hashstudio.ru
 * @date 11/05/17 09:26
 */

namespace Modules\Props\Contrib;


use Modules\Props\Helpers\PropHelper;
use Phact\Helpers\Text;
use Phact\Orm\QuerySet;

class PropsQuerySet extends QuerySet
{
    public function connectPropRelation($id)
    {
        $name = "property#{$id}";
        if (!$this->hasRelation($name)) {
            $property = PropHelper::getProp($id);
            $propertyValueModelClass = $property->getValueModel();
            $this->appendRelation($name, new $propertyValueModelClass, [
                [
                    'table' => $propertyValueModelClass::getTableName(),
                    'from' => 'id',
                    'to' => 'object_id'
                ]
            ]);
            $this->filter([
                $name . '__prop_id' => $id
            ]);
        }
        return $name;
    }

    public function convertPropValueColumn($name)
    {
        if (preg_match('/prop\@(\d+)/', $name, $out)) {
            $propertyValueAlias = $out[0];
            $id = $out[1];
            $propertyRelationAlias = $this->connectPropRelation($id);
            $valueColumn = $propertyRelationAlias . '__value';
            return str_replace($propertyValueAlias, $valueColumn, $name);
        } else {
            return $name;
        }
    }

    public function handlePropsConditions($conditions)
    {
        foreach ($conditions as $key => $condition) {
            if (Text::startsWith($key, 'prop@')) {
                $newKey = $this->convertPropValueColumn($key);
                unset($conditions[$key]);
                $conditions[$newKey] = $condition;
            } elseif (is_array($condition)) {
                $conditions[$key] = $this->handleConditions($condition);
            } else {
                $conditions[$key] = $condition;
            }
        }
        return $conditions;
    }

    public function handlePropsOrder($orders)
    {
        foreach ($orders as $key => $value) {
            if (is_string($value) && mb_strpos($value, 'prop@', null, 'UTF-8')) {
                $orders[$key] = $this->convertPropValueColumn($value);
            } elseif (is_string($key) && mb_strpos($key, 'prop@', null, 'UTF-8')) {
                $newKey = $this->convertPropValueColumn($key);
                unset($orders[$key]);
                $orders[$newKey] = $value;
            } else {
                $orders[$key] = $value;
            }
        }
        return $orders;
    }

    public function filter($filter = [])
    {
        $filter = $this->handlePropsConditions($filter);
        return parent::filter($filter);
    }

    public function exclude($exclude = [])
    {
        $exclude = $this->handlePropsConditions($exclude);
        return parent::exclude($exclude);
    }

    public function order($order = [])
    {
        $order = $this->handlePropsOrder($order);
        return parent::order($order); // TODO: Change the autogenerated stub
    }
}